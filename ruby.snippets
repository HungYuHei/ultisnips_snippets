priority 100

# #######################
# ######## Ruby #########
# #######################
snippet sel ".select { |<item>| <block> }" w
select { |${1:item}| ${0} }
endsnippet
snippet seld ".select do |<item>| <block> end" w
select do |${1:item}|
	${0}
end
endsnippet

snippet b "block: { |arg| ... } "
{ |${1:arg}| ${0} }
endsnippet
snippet do "do block"
do
	${0}
end
endsnippet
snippet doa "do block with argument"
do |${1:arg}|
	${0}
end
endsnippet

snippet strf "Formats date according to the directives in the given format string." w
strftime('${1:%Y-%m-%d %H:%M:%S %z}')
endsnippet

snippet multi_line_string "Multi-Line String(Raw Ruby Style)" b
${1:str} = <<-STR${2:.gsub(/[[:space:]]+/, " ").strip}
	${0}
STR
endsnippet

# snippet each
# each { |${1:item}| ${0} }
# endsnippet
# snippet eachd
# each do |${1:item}|
# 	${0}
# end
# endsnippet

snippet lam "lambda"
lambda { |${1:args}| ${0} }
endsnippet
snippet -> "-> for lambda"
-> { ${0} }
endsnippet
snippet ->a "-> for lambda with arguments"
-> (${1:args}) { ${0} }
endsnippet

snippet case "case <variable> when <expression> ... end" b
case ${1:variable}
when ${2:expression}
	$0
end
endsnippet

snippet def "define instance method" b
def ${1:method_name}
end
endsnippet
snippet defs "define class method" b
def self.${1:method_name}
end
endsnippet
snippet claself "class << self .. end" b
class << self
	${0}
end
endsnippet

snippet if "if ... end" b
if ${1:condition}
	${0}
end
endsnippet
snippet ife "if ... else ... end" b
if ${1:condition}
else
end
endsnippet

snippet md5 "Digest::MD5.hexdigest" b
Digest::MD5.hexdigest(${1})
endsnippet

# #######################
# ######## Tools ########
# #######################
snippet csv "save csv file" b
CSV.open(${1:Rails.root.join("tmp/file.csv")}, "wb") do |csv|
	csv << [${2}]
end
endsnippet
snippet csvfile "save csv file" b
csv_file = ${1:Rails.root.join("tmp/file.csv")}
CSV.open(csv_file, "wb") do |csv|
	csv << [${2}]
end
endsnippet

snippet configable "configable module" b
class Config
	attr_accessor :${1:configable_attributes}
end

class << self
	attr_writer :config

	def config
		@config ||= Config.new
	end

	def configure
		yield(config)
	end
end
endsnippet

snippet lambda_reuse "lambda reuseable" b
${1:snip} = lambda do |${2:arg}|
	${0}
end
${4:list}.each(&${1})
endsnippet

extends rails
extends rails_custom

#########################################
# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

